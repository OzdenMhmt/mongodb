////==================================================================================
////                                  AGGREGATION
////==================================================================================
// 1) Aggregation, dokumanlardaki verilerin islenmesi ve hesaplanan 
//    sonuclarin donmesini saglayan islemlerdir. 
//
// 2) Aggregation islemleri, farklı dokumanlardaki degerleri gruplandirabilir.
//
// 3) Bu gruplanan veriler uzerinde cesitli islemlerin gereceklestirelerek tek 
//    bir sonuc degerinin donmesi saglanabilir.
//
//  4) MongoDB, 3 farklı yontem ile aggregation gerceklestirmeye izin verir.
//     A) aggregation pipeline (toplama boru hattı)
//     B) map-reduce function (map indirgeme)
//     C) single-purpose aggregation (tek-amaç toplama)
//
//  5) Aggregiation, SQL'deki Join islemlerine benzetilebilir. 
//
//     SQL         MONGO
//----------------------
//     WHERE       $match
//     GROUP BY 	 $group
//     HAVING	     $match
//     SELECT	     $project
//     ORDER BY    $sort
//     LIMIT	     $limit
//     SUM()	     $sum
//     COUNT()	   $count, $sum
//     JOIN	       $lookup
//     MERGE 	     $merge (MongoDB 4.2 ve sonrasi)
////aggregation (sum,max,avg vs) yaparken bi field (column) kullanacaksak syntax ı ==> "$urunAdi" şeklinde===================================================================
​
///==================================================================================
////                          AGGREGATION PIPELINE
////==================================================================================
// SYNTAX
// 
//   pipeline = [
 //   { $match : { … },
 //   { $group : { … },
 //   { $sort : { … },
//      ...
//   ]
//   db.collectionName.aggregate(pipeline, options)
//
//  $match() – Verileri secerken flitrelemek icin
//  $group({_id : "$field"}) - islenen verilerin grupplanmasi icin 
//  $sort()  Sonuclarin siralanmasi icin
​
////---------------------------------------------------------------------------------
//// 1) "KISILER" veritabaninda "ogrenciler" collection'i tanimlayalim. 
////---------------------------------------------------------------------------------
​use("KISILER");
db.ogrenciler.deleteMany({});

use("KISILER")
//db.ogrenciler.find()
//  db.people.drop();
 //db.createCollection("ogrenciler")
// use("kisiler");
// db.createCollection("ogrenciler");
​
// //---------------------------------------------------------------------------------
// // 2) asagidaki dokumanlari collection'a kaydedelim.   
// //---------------------------------------------------------------------------------
use("KISILER")
db.ogrenciler.insertMany([
{"isim": "Tarik ", "yas":57, "sube": "A", "not":97, "dersler":["fizik", "mat"]}, 
{"isim": "Selim", "yas":37, "sube": "A","not":77,},
{"isim": "Nalan", "yas":17, "sube": "B","not":55, "dersler":["fizik", "ingilizce"]},
{"isim": "Burhan", "yas":21, "sube": "B","not":43, "dersler":["fizik", "mat"]},
{"isim": "Niyazi", "yas":40, "sube": "B","not":99, "dersler":["ingilizce"]},
{"isim": "Galip", "yas":37, "sube": "A","not":34, "dersler":["ingilizce"]},
{"isim": "Teslime", "yas":24, "sube": "A","not":88, "dersler":["mat","fizik","kimya"]}]);



//3)dersler'i ingilizce yasi 50 den kucuk olanalar ogrencileri sorgular
use("KISILER")
db.ogrenciler.find({dersler:["ingilizce"], yas:{$lt:50}});

use("KISILER")
db.ogrenciler.aggregate({$match:{dersler:["ingilizce"],yas:{$lt:50}}});

//4) B-subesindeki ogrenci saysisini hesaplayan sorgu yaz

use("KISILER")
db.ogrenciler.aggregate({$match:{sube:"B"}},{$count:"B-Subesindeki ogrenci sayisi"});

/// 5) Tum subelerdeki toplam ogrenci sayisini hesaplayan sorguyu yaziniz.
////    Nr bir grup icin 1 sayisinin donmesini ve bunlarin toplanmasini saglar.
// count:tek sonuç ,mesela B sınıfındaki.....ler..
// sum:A daki...ler, B deki...ler birer birer toplanır
////---------------------------------------------------------------------------------
 ////    NOT: Group isleminde degiskenlerin onune $ isareti konulmalidir.
 //  id den sonra dersler, not vs de olabilir, 
 //burada şubeye göre grupla=$group:{_id:"$sube"}}
use("KISILER")
db.ogrenciler.aggregate({$group:{_id:"$sube",topOgr:{$sum:1}}});


//6) tum subelerdeki toplam ogrenci sayilarini  ve her subedeki max notu hesaplayam sorgu yaziniz
use("KISILER")
db.ogrenciler.aggregate({$group:{_id:"$sube",topOgr:{$sum:1},maxNot:{$max:"$not"}}});

//7) yasi 30 dan kucuk olanlarin subelere gore not ortalamalrini hesaplayan sorgu yaziniz
use("KISILER")
db.ogrenciler.aggregate({$match:{yas:{$lt:30}}},{$group:{_id:"$sube",ortNot:{$avg:"$not"}}});

//8 ingilizce dersini alanlarin subelere gore sayilarini hesaplayan sorguyu yaziniz
use("KISILER")
db.ogrenciler.aggregate([{$match:{dersler:"ingilizce"}},{$group:{_id:"$sube",ingSNot:{$sum:1}}}]);

//9) sadece fizik ve mat dersini alanlarin subelere gore sayisiniz yaziniz
use("KISILER")
db.ogrenciler.aggregate([{$match:{dersler:["fizik","mat"]}},{$group:{_id:"$sube",mfS:{$sum:1}}}]);

//10) fizik veya matematik alanlar sayisi
use("KISILER")
db.ogrenciler.aggregate([{$match:{dersler:{$in:["fizik","mat"]}}},{$group:{_id:"$sube",fizikveMatAlanlarinSayisi:{$sum:1}}}]);

//11) A subesindeki ogrencileri yasa gore azalan sirada, nota gore yukselen sirada
use("KISILER")
db.ogrenciler.aggregate([{$match:{sube:"A"}},{$sort:{yas:-1,not:1}}]);

//2.yol
use("KISILER")
db.ogrenciler.aggregate({$match:{sube:"A"}}).sort({yas:-1,not:1});


//// 12) MEDYA veritabanı altında hesaplar ismiyle yeni bir collection olusturunuz
//       ve degerleri girginiz.
////---------------------------------------------------------------------------------
use("MEDYA")
db.hesaplar.insertMany(
[{"isim" : "ali", "harcamalar":[-80, -40, -50, -120], "kazanc":[100, 150]},
{"isim" : "Can", "harcamalar" : [-60, -30, -20], "kazanc" : [200, 50, 130] },
{"isim" : "Canan", "harcamalar" : [-80, -40, -50], "kazanc" : [300, 450] },
{"isim" : "Betul", "harcamalar" : [-80, -120], "kazanc" : [500, 50, 70, 10] },
{"isim" : "Ahsen", "harcamalar" : [-140, -50, -120], "kazanc" : [400] },
{"isim" : "Su", "harcamalar" : [-120], "kazanc" : [22, 375, 65] },
{"isim" : "Pelin", "harcamalar" : [-180, -40, -70, -12], "kazanc" : [500, 650, 400]}]); 

////---------------------------------------------------------------------------------
//// 13) var olan dokumanlarda her kisi icin toplam harcama, toplam kazanc ve  
////     bakiye degerlerini hesaplayarak dokumana ekleyen sorguyu yaziniz.
////     bakiye'ye gore siralayiniz.
////     NOT: Sorguda olmayan bir field icin $addFields metodu kullanilabilir. project lede yeni field ekleniyor , join classında görücez ama. dizilerde buradaki şekilde olur
////---------------------------------------------------------------------------------
use("MEDYA")

pipeline= [{$addFields:{toplamHarcama:{$sum:"$harcamalar"},toplamKazanc:{$sum:"$kazanc"}}},
{$addFields:{bakiye:{$add :["$toplamHarcama","$toplamKazanc"]}}},
{$project:{harcamalar:0,kazanc:0,_id:0}}

]

db.hesaplar.aggregate(pipeline);


////---------------------------------------------------------------------------------
//// 14) hesaplar collection'nin muhasabe adinda bir kopyasini olusturalim.
////---------------------------------------------------------------------------------
use("MEDYA")
db.hesaplar.aggregate( {$project:{_id:0}}, {$merge:    {   into:"muhasebe"}})
db.muhasebe.find();
//id:0 kapatmasaydım eski id lerle kopya oluşturacaktı, şimdi default verecek
////---------------------------------------------------------------------------------
//// 15) hesaplar collection'nindan harcamalar kismini cikararak kazanclar adinda 
////     yeni bir kopyasini olusturalim.
// ////---------------------------------------------------------------------------------
use("MEDYA")
db.hesaplar.aggregate( {$project:{_id:0,harcamalar:0}}, {$merge:    {   into:"kazanclar"}})


////==================================================================================
////                                  BULKWRITE (toplu yazmak)
////  Birden fazla islemi ayni komutla gerceklestirmek icin BulkWrite kullanilabilir.
// https://docs.mongodb.com/manual/reference/method/db.collection.bulkWrite/
// db.collections.bulkWrite([
//       {insertOne:{"document": {yazar: "........", fiyat:....., yayinYili : ...... }}},
//   {updateOne:{"filter":{yazar: "......"}, "update": {$set: {fiyat:.......}}}},
//   {replaceOne:{"filter":{yazar:"......."}, "replacement": {yazar: "......", fiyat:.....}}},
//   {deleteOne:{"filter" : {yazar: "........."}}}
//    ]);
//==================================================================================
use("MEDYA");
db.hikayeler.insertMany(
[{"yazar" : "Mehmet Bak", "fiyat" : 60, "yayinYili" : 1998 },
{"yazar" : "Ali Gel", "fiyat" : 75, "yayinYili" : 2000 },
{"yazar" : "Su Ak", "fiyat" : 90, "yayinYili" : 2005 },
{"yazar" : "İsmet Kaç", "fiyat" : 35, "yayinYili" : 2010 },
{"yazar" : "Pelin Su", "fiyat" : 80, "yayinYili" : 2020 },
{"yazar" : "Suat Ok", "fiyat" : 54, "yayinYili" : 2001}]);


use("MEDYA")
db.hikayeler.bulkWrite([
{insertOne:{"document": {yazar: "Bahar Koc", fiyat:80, yayinYili :2021}}},
{updateOne:{"filter":{yazar: "Ali Gel"}, "update": {$set: {fiyat:99}}}},
{replaceOne:{"filter":{yazar:"Pelin Su"}, "replacement": {yazar: "Erdem Göcen", fiyat:100}}},
{deleteOne:{"filter" : {yazar: "Mehmet Bak"}}}

])

/// 22) fiyati 5000 olan urunleri, urunAdi'na gore siralayarak (A-Z)
//// listeleyiniz.
//extra eleman ekle, fiyatı 5000 olan.
////-----------------------------------------------------------------
// 1 : A-Z, -1: Z-A ( ASCII formatina gore siralama yapar)
db.fiyatlar.find({"fiyat": 5000},{"_id":0}).sort({"urunAdi": 1});
//soruyu çöz shellde de göster
//text arama ***********
db.createCollection("articles");
db.articles.createIndex( { subject: "text" } )
db.articles.insert(
   [
     { _id: 1, subject: "coffee", author: "xyz", views: 50 },
     { _id: 2, subject: "Coffee Shopping", author: "efg", views: 5 },
     { _id: 3, subject: "Baking a cake", author: "abc", views: 90  },
     { _id: 4, subject: "baking", author: "xyz", views: 100 },
     { _id: 5, subject: "Café Con Leche", author: "abc", views: 200 },
     { _id: 6, subject: "Сырники", author: "jkl", views: 80 },
     { _id: 7, subject: "coffee and cream", author: "efg", views: 10 },
     { _id: 8, subject: "Cafe con Leche", author: "xyz", views: 10 }
   ]
)
db.articles.find( { $text: { $search: "coffee" } } )



